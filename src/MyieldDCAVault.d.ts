/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MyieldDCAVaultInterface extends ethers.utils.Interface {
  functions: {
    "MAX_BPS()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "addStrategy(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceInStrats()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfNeed()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "distributeNeed()": FunctionFragment;
    "feeBps()": FunctionFragment;
    "feedDecimals()": FunctionFragment;
    "fromDepositToShares(uint256)": FunctionFragment;
    "fromSharesToWithdrawal(uint256)": FunctionFragment;
    "getMinOutputAmount(uint256,uint256)": FunctionFragment;
    "getTotalValue()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "makeSwapDonation(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "need()": FunctionFragment;
    "needDecimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeStrategy(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportHarvest(uint256)": FunctionFragment;
    "rug(address,address)": FunctionFragment;
    "setFeeBps(uint256)": FunctionFragment;
    "setFeedDecimals(uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "strategist()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "swapToNeed(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toSwap()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "users(uint256)": FunctionFragment;
    "valueOfNeed()": FunctionFragment;
    "want()": FunctionFragment;
    "wantDecimals()": FunctionFragment;
    "wantStrategies(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addStrategy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceInStrats",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfNeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeNeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fromDepositToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fromSharesToWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinOutputAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSwapDonation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "need", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "needDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportHarvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rug", values: [string, string]): string;
  encodeFunctionData(
    functionFragment: "setFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapToNeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "toSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "valueOfNeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wantDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantStrategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceInStrats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeNeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromDepositToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromSharesToWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeSwapDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "need", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "needDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rug", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapToNeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueOfNeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wantDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DCA(uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "Distribution(address,uint256)": EventFragment;
    "Harvest(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DCA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class MyieldDCAVault extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MyieldDCAVaultInterface;

  functions: {
    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRECISION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStrategy(
      newStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStrategy(address)"(
      newStrat: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceInStrats(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceInStrats()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfNeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfNeed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributeNeed(overrides?: Overrides): Promise<ContractTransaction>;

    "distributeNeed()"(overrides?: Overrides): Promise<ContractTransaction>;

    feeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeBps()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    feedDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fromDepositToShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fromDepositToShares(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fromSharesToWithdrawal(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "fromSharesToWithdrawal(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    makeSwapDonation(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeSwapDonation(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    need(overrides?: CallOverrides): Promise<[string]>;

    "need()"(overrides?: CallOverrides): Promise<[string]>;

    needDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "needDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeStrategy(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeStrategy(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reportHarvest(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reportHarvest(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rug(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rug(address,address)"(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeBps(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeBps(uint256)"(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPaused(
      newPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPaused(bool)"(
      newPaused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    swapToNeed(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToNeed(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    toSwap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "toSwap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    valueOfNeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "valueOfNeed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "want()"(overrides?: CallOverrides): Promise<[string]>;

    wantDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "wantDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wantStrategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "wantStrategies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  "PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  addStrategy(
    newStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStrategy(address)"(
    newStrat: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceInStrats(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceInStrats()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributeNeed(overrides?: Overrides): Promise<ContractTransaction>;

  "distributeNeed()"(overrides?: Overrides): Promise<ContractTransaction>;

  feeBps(overrides?: CallOverrides): Promise<BigNumber>;

  "feeBps()"(overrides?: CallOverrides): Promise<BigNumber>;

  feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  fromDepositToShares(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fromDepositToShares(uint256)"(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fromSharesToWithdrawal(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fromSharesToWithdrawal(uint256)"(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinOutputAmount(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinOutputAmount(uint256,uint256)"(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  makeSwapDonation(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeSwapDonation(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  need(overrides?: CallOverrides): Promise<string>;

  "need()"(overrides?: CallOverrides): Promise<string>;

  needDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "needDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  removeStrategy(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeStrategy(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reportHarvest(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reportHarvest(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rug(
    asset: string,
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rug(address,address)"(
    asset: string,
    destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeBps(
    newFeeBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeBps(uint256)"(
    newFeeBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeedDecimals(
    newFeedDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeedDecimals(uint256)"(
    newFeedDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPaused(
    newPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPaused(bool)"(
    newPaused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategist(
    newStrategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    newStrategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasury(
    newTreasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    newTreasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  swapToNeed(
    cachedRewardToWantRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToNeed(uint256)"(
    cachedRewardToWantRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  toSwap(overrides?: CallOverrides): Promise<BigNumber>;

  "toSwap()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "users(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  valueOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

  "valueOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

  want(overrides?: CallOverrides): Promise<string>;

  "want()"(overrides?: CallOverrides): Promise<string>;

  wantDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "wantDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  wantStrategies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "wantStrategies(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    shares: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(newStrat: string, overrides?: CallOverrides): Promise<void>;

    "addStrategy(address)"(
      newStrat: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceInStrats(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceInStrats()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeNeed(overrides?: CallOverrides): Promise<void>;

    "distributeNeed()"(overrides?: CallOverrides): Promise<void>;

    feeBps(overrides?: CallOverrides): Promise<BigNumber>;

    "feeBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    fromDepositToShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromDepositToShares(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromSharesToWithdrawal(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromSharesToWithdrawal(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeSwapDonation(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeSwapDonation(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    need(overrides?: CallOverrides): Promise<string>;

    "need()"(overrides?: CallOverrides): Promise<string>;

    needDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "needDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    removeStrategy(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStrategy(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reportHarvest(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reportHarvest(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rug(
      asset: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rug(address,address)"(
      asset: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeBps(
      newFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeBps(uint256)"(
      newFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(newPaused: boolean, overrides?: CallOverrides): Promise<void>;

    "setPaused(bool)"(
      newPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      newStrategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(newTreasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    swapToNeed(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapToNeed(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    toSwap(overrides?: CallOverrides): Promise<BigNumber>;

    "toSwap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    valueOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

    "valueOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<string>;

    "want()"(overrides?: CallOverrides): Promise<string>;

    wantDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "wantDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantStrategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "wantStrategies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    DCA(wantIn: null, needOut: null): EventFilter;

    Deposit(account: string | null, amount: null, shares: null): EventFilter;

    Distribution(user: string | null, amountOfNeed: null): EventFilter;

    Harvest(rewardsAmount: null, fees: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Withdraw(account: string | null, value: null, shares: null): EventFilter;
  };

  estimateGas: {
    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    "PRECISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(newStrat: string, overrides?: Overrides): Promise<BigNumber>;

    "addStrategy(address)"(
      newStrat: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceInStrats(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceInStrats()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributeNeed(overrides?: Overrides): Promise<BigNumber>;

    "distributeNeed()"(overrides?: Overrides): Promise<BigNumber>;

    feeBps(overrides?: CallOverrides): Promise<BigNumber>;

    "feeBps()"(overrides?: CallOverrides): Promise<BigNumber>;

    feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    fromDepositToShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromDepositToShares(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromSharesToWithdrawal(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fromSharesToWithdrawal(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    makeSwapDonation(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeSwapDonation(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    need(overrides?: CallOverrides): Promise<BigNumber>;

    "need()"(overrides?: CallOverrides): Promise<BigNumber>;

    needDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "needDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStrategy(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeStrategy(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reportHarvest(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reportHarvest(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rug(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rug(address,address)"(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeBps(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeBps(uint256)"(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPaused(newPaused: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setPaused(bool)"(
      newPaused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasury(newTreasury: string, overrides?: Overrides): Promise<BigNumber>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapToNeed(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapToNeed(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    toSwap(overrides?: CallOverrides): Promise<BigNumber>;

    "toSwap()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueOfNeed(overrides?: CallOverrides): Promise<BigNumber>;

    "valueOfNeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "want()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "wantDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    wantStrategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wantStrategies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(shares: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRECISION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      newStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStrategy(address)"(
      newStrat: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceInStrats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceInStrats()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfNeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfNeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributeNeed(overrides?: Overrides): Promise<PopulatedTransaction>;

    "distributeNeed()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    feeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeBps()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fromDepositToShares(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fromDepositToShares(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromSharesToWithdrawal(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fromSharesToWithdrawal(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    makeSwapDonation(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeSwapDonation(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    need(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "need()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    needDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "needDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStrategy(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeStrategy(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reportHarvest(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reportHarvest(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rug(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rug(address,address)"(
      asset: string,
      destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeBps(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeBps(uint256)"(
      newFeeBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPaused(
      newPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPaused(bool)"(
      newPaused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapToNeed(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToNeed(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "toSwap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueOfNeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueOfNeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "want()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wantDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantStrategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wantStrategies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
