/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AAVEUSDCRewardsInterface extends ethers.utils.Interface {
  functions: {
    "MATIC_REWARDS()": FunctionFragment;
    "MAX_BPS()": FunctionFragment;
    "aToken()": FunctionFragment;
    "addressProvider()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "canBorrow()": FunctionFragment;
    "canRepay()": FunctionFragment;
    "currentHealthFactor()": FunctionFragment;
    "debtBelowHealth()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "deposited()": FunctionFragment;
    "divest()": FunctionFragment;
    "feedDecimals()": FunctionFragment;
    "getMinOutputAmount(uint256,uint256)": FunctionFragment;
    "getRewardsAmount()": FunctionFragment;
    "getTotalValue()": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "invest()": FunctionFragment;
    "lendingPool()": FunctionFragment;
    "minHealth()": FunctionFragment;
    "minRebalanceAmount()": FunctionFragment;
    "owed()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayDebt()": FunctionFragment;
    "rewards()": FunctionFragment;
    "rewardsDecimals()": FunctionFragment;
    "setFeedDecimals(uint256)": FunctionFragment;
    "setMinHealth(uint256)": FunctionFragment;
    "setRebalanceAmount(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "shouldDivest()": FunctionFragment;
    "shouldInvest()": FunctionFragment;
    "stats()": FunctionFragment;
    "strategist()": FunctionFragment;
    "swapRewardsToWant(uint256,uint256)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vToken()": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawStepFromAAVE(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MATIC_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(functionFragment: "aToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canBorrow", values?: undefined): string;
  encodeFunctionData(functionFragment: "canRepay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtBelowHealth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposited", values?: undefined): string;
  encodeFunctionData(functionFragment: "divest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinOutputAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "invest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minHealth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minRebalanceAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owed", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repayDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldDivest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldInvest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stats", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRewardsToWant",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStepFromAAVE",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MATIC_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRepay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtBelowHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minHealth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minRebalanceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldDivest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldInvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapRewardsToWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStepFromAAVE",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class AAVEUSDCRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AAVEUSDCRewardsInterface;

  functions: {
    MATIC_REWARDS(overrides?: CallOverrides): Promise<[string]>;

    "MATIC_REWARDS()"(overrides?: CallOverrides): Promise<[string]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    aToken(overrides?: CallOverrides): Promise<[string]>;

    "aToken()"(overrides?: CallOverrides): Promise<[string]>;

    addressProvider(overrides?: CallOverrides): Promise<[string]>;

    "addressProvider()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    canBorrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    "canBorrow()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    canRepay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "canRepay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentHealthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentHealthFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtBelowHealth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "debtBelowHealth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    "deposited()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    divest(overrides?: Overrides): Promise<ContractTransaction>;

    "divest()"(overrides?: Overrides): Promise<ContractTransaction>;

    feedDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardsAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invest(overrides?: Overrides): Promise<ContractTransaction>;

    "invest()"(overrides?: Overrides): Promise<ContractTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    "lendingPool()"(overrides?: CallOverrides): Promise<[string]>;

    minHealth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minHealth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRebalanceAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minRebalanceAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "owed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    repayDebt(overrides?: Overrides): Promise<ContractTransaction>;

    "repayDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    rewardsDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinHealth(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinHealth(uint256)"(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRebalanceAmount(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRebalanceAmount(uint256)"(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shouldDivest(overrides?: CallOverrides): Promise<[boolean]>;

    "shouldDivest()"(overrides?: CallOverrides): Promise<[boolean]>;

    shouldInvest(overrides?: CallOverrides): Promise<[boolean]>;

    "shouldInvest()"(overrides?: CallOverrides): Promise<[boolean]>;

    stats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber;
        totalDebtETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    "stats()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber;
        totalDebtETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    swapRewardsToWant(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapRewardsToWant(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vToken(overrides?: CallOverrides): Promise<[string]>;

    "vToken()"(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    "vault()"(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "want()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawStepFromAAVE(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawStepFromAAVE(uint256)"(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MATIC_REWARDS(overrides?: CallOverrides): Promise<string>;

  "MATIC_REWARDS()"(overrides?: CallOverrides): Promise<string>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

  aToken(overrides?: CallOverrides): Promise<string>;

  "aToken()"(overrides?: CallOverrides): Promise<string>;

  addressProvider(overrides?: CallOverrides): Promise<string>;

  "addressProvider()"(overrides?: CallOverrides): Promise<string>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  canBorrow(overrides?: CallOverrides): Promise<BigNumber>;

  "canBorrow()"(overrides?: CallOverrides): Promise<BigNumber>;

  canRepay(overrides?: CallOverrides): Promise<BigNumber>;

  "canRepay()"(overrides?: CallOverrides): Promise<BigNumber>;

  currentHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "currentHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  debtBelowHealth(overrides?: CallOverrides): Promise<BigNumber>;

  "debtBelowHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposited(overrides?: CallOverrides): Promise<BigNumber>;

  "deposited()"(overrides?: CallOverrides): Promise<BigNumber>;

  divest(overrides?: Overrides): Promise<ContractTransaction>;

  "divest()"(overrides?: Overrides): Promise<ContractTransaction>;

  feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMinOutputAmount(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinOutputAmount(uint256,uint256)"(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardsAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    cachedRewardToWantRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256)"(
    cachedRewardToWantRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invest(overrides?: Overrides): Promise<ContractTransaction>;

  "invest()"(overrides?: Overrides): Promise<ContractTransaction>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  "lendingPool()"(overrides?: CallOverrides): Promise<string>;

  minHealth(overrides?: CallOverrides): Promise<BigNumber>;

  "minHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

  minRebalanceAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minRebalanceAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  owed(overrides?: CallOverrides): Promise<BigNumber>;

  "owed()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  repayDebt(overrides?: Overrides): Promise<ContractTransaction>;

  "repayDebt()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  rewardsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  setFeedDecimals(
    newFeedDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeedDecimals(uint256)"(
    newFeedDecimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinHealth(
    newMinHealth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinHealth(uint256)"(
    newMinHealth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRebalanceAmount(
    newRebalanceAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRebalanceAmount(uint256)"(
    newRebalanceAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStrategist(
    newStrategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    newStrategist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shouldDivest(overrides?: CallOverrides): Promise<boolean>;

  "shouldDivest()"(overrides?: CallOverrides): Promise<boolean>;

  shouldInvest(overrides?: CallOverrides): Promise<boolean>;

  "shouldInvest()"(overrides?: CallOverrides): Promise<boolean>;

  stats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  "stats()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralETH: BigNumber;
      totalDebtETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  swapRewardsToWant(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapRewardsToWant(uint256,uint256)"(
    amount: BigNumberish,
    ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vToken(overrides?: CallOverrides): Promise<string>;

  "vToken()"(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  "want()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawStepFromAAVE(
    canRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawStepFromAAVE(uint256)"(
    canRepay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MATIC_REWARDS(overrides?: CallOverrides): Promise<string>;

    "MATIC_REWARDS()"(overrides?: CallOverrides): Promise<string>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    aToken(overrides?: CallOverrides): Promise<string>;

    "aToken()"(overrides?: CallOverrides): Promise<string>;

    addressProvider(overrides?: CallOverrides): Promise<string>;

    "addressProvider()"(overrides?: CallOverrides): Promise<string>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    canBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    "canBorrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    canRepay(overrides?: CallOverrides): Promise<BigNumber>;

    "canRepay()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "currentHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtBelowHealth(overrides?: CallOverrides): Promise<BigNumber>;

    "debtBelowHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposited(overrides?: CallOverrides): Promise<BigNumber>;

    "deposited()"(overrides?: CallOverrides): Promise<BigNumber>;

    divest(overrides?: CallOverrides): Promise<void>;

    "divest()"(overrides?: CallOverrides): Promise<void>;

    feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    invest(overrides?: CallOverrides): Promise<void>;

    "invest()"(overrides?: CallOverrides): Promise<void>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    "lendingPool()"(overrides?: CallOverrides): Promise<string>;

    minHealth(overrides?: CallOverrides): Promise<BigNumber>;

    "minHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRebalanceAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minRebalanceAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owed(overrides?: CallOverrides): Promise<BigNumber>;

    "owed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    repayDebt(overrides?: CallOverrides): Promise<void>;

    "repayDebt()"(overrides?: CallOverrides): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    rewardsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinHealth(
      newMinHealth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinHealth(uint256)"(
      newMinHealth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceAmount(
      newRebalanceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRebalanceAmount(uint256)"(
      newRebalanceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      newStrategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldDivest(overrides?: CallOverrides): Promise<boolean>;

    "shouldDivest()"(overrides?: CallOverrides): Promise<boolean>;

    shouldInvest(overrides?: CallOverrides): Promise<boolean>;

    "shouldInvest()"(overrides?: CallOverrides): Promise<boolean>;

    stats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber;
        totalDebtETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    "stats()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralETH: BigNumber;
        totalDebtETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    swapRewardsToWant(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapRewardsToWant(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vToken(overrides?: CallOverrides): Promise<string>;

    "vToken()"(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    "want()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawStepFromAAVE(
      canRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStepFromAAVE(uint256)"(
      canRepay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    MATIC_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    "MATIC_REWARDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    aToken(overrides?: CallOverrides): Promise<BigNumber>;

    "aToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    canBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    "canBorrow()"(overrides?: CallOverrides): Promise<BigNumber>;

    canRepay(overrides?: CallOverrides): Promise<BigNumber>;

    "canRepay()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "currentHealthFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    debtBelowHealth(overrides?: CallOverrides): Promise<BigNumber>;

    "debtBelowHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposited(overrides?: CallOverrides): Promise<BigNumber>;

    "deposited()"(overrides?: CallOverrides): Promise<BigNumber>;

    divest(overrides?: Overrides): Promise<BigNumber>;

    "divest()"(overrides?: Overrides): Promise<BigNumber>;

    feedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardsAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    invest(overrides?: Overrides): Promise<BigNumber>;

    "invest()"(overrides?: Overrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    minHealth(overrides?: CallOverrides): Promise<BigNumber>;

    "minHealth()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRebalanceAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minRebalanceAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    owed(overrides?: CallOverrides): Promise<BigNumber>;

    "owed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    repayDebt(overrides?: Overrides): Promise<BigNumber>;

    "repayDebt()"(overrides?: Overrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinHealth(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinHealth(uint256)"(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRebalanceAmount(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRebalanceAmount(uint256)"(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shouldDivest(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldDivest()"(overrides?: CallOverrides): Promise<BigNumber>;

    shouldInvest(overrides?: CallOverrides): Promise<BigNumber>;

    "shouldInvest()"(overrides?: CallOverrides): Promise<BigNumber>;

    stats(overrides?: CallOverrides): Promise<BigNumber>;

    "stats()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRewardsToWant(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapRewardsToWant(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vToken(overrides?: CallOverrides): Promise<BigNumber>;

    "vToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "want()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawStepFromAAVE(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawStepFromAAVE(uint256)"(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MATIC_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MATIC_REWARDS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_BPS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "aToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "canBorrow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canRepay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "canRepay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentHealthFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentHealthFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtBelowHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "debtBelowHealth()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deposited()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "divest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    feedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feedDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinOutputAmount(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinOutputAmount(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardsAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256)"(
      cachedRewardToWantRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    invest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "invest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendingPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minHealth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRebalanceAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minRebalanceAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    repayDebt(overrides?: Overrides): Promise<PopulatedTransaction>;

    "repayDebt()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeedDecimals(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeedDecimals(uint256)"(
      newFeedDecimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinHealth(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinHealth(uint256)"(
      newMinHealth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRebalanceAmount(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRebalanceAmount(uint256)"(
      newRebalanceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStrategist(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      newStrategist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shouldDivest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shouldDivest()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldInvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shouldInvest()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stats()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRewardsToWant(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapRewardsToWant(uint256,uint256)"(
      amount: BigNumberish,
      ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "want()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawStepFromAAVE(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawStepFromAAVE(uint256)"(
      canRepay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
